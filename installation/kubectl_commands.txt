kubectl run app1-pod --image=nginx:latest
kubectl get pods
kubectl describe pod app1-pod
kubectl get pods							
kubectl get pods -o wide
kubectl logs app1-pod
kubectl exec -it app1-pod -- /bin/bash
kubectl delete pod app1-pod
curl 192.168.87.131:80

kubectl get pods -o wide --all-namespaces
kubectl get pods -o wide --namespace kube-system
kubectl get namespaces
kubectl create namespace dev
kubectl create namespace test
kubectl run app2-pod --image=nginx:latest --namespace dev
kubectl get pods -o wide --namespace dev
kubectl get pods -o wide --namespace testc

kubectl api-resources


//Command to create pods(or apply whatever is there in manifest file):
kubectl apply -f pod1.yml
//Command to get all the pods in your cluster:
kubectl get pods
//Command to get all the pods in your cluster(in detail):
kubectl get pods -o wide
//Command to get the details of a particular pod:
kubectl describe pod testpod
//Command to check the logs of particular container in a pod
kubectl logs -f multicontainerpod -c c01
//Command to delete a pod:
kubectl delete pod testpod
//Command to get the pod details along with the labels:
kubectl get pods --show-labels
//Command to create a label for a pod:
kubectl label pods multicontainerpod env=production
//Command to get the pods with articular label:
kubectl get pods -l env=development
//Command to get inside the pod:
kubectl exec -it saturdaypod -- /bin/bash


controllers:

kubectl get rs
//Command to describe a particular replica set
kubectl describe rs myrs
//Command to change the number of replicas/scaling for replica set object
kubectl scale --replicas=5 rs myrs
//Command to get the deployment objects
kubectl get deploy
//Command to describe a particular replica set
kubectl describe deploy mydeployments
//Command to change the number of replicas/scaling for deployment object
kubectl scale --replicas=3 deploy mydeployments
//Command to check the status of deployment rollout
kubectl rollout status deployment mydeployments
//Command to rollback to the old version
kubectl rollout undo deployment mydeployments

 deployment is responsible for managing and deploying resources (such as pods) and ensuring that they run with the desired configuration, including any changes made to the application.
A deployment ensures that a specified number of identical pods are running at all times. When you apply changes (e.g., updating a container image or modifying configuration), the deployment automatically handles the updates to the pods.

In Kubernetes, a rollout refers to the process of deploying or updating an application managed by a Deployment or StatefulSet. It involves gradually updating pods with new configurations, such as changes in container images or environment variables, ensuring that the update happens with minimal downtime.
